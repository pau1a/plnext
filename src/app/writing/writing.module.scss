@use "../../styles/utilities.scss" as utils;

.page {
  position: relative;
  overflow: hidden;
  min-height: 100vh;
  padding-block-start: clamp(3.5rem, 6vw, 6rem);
  padding-block-end: clamp(4rem, 7vw, 6.5rem);
  background:
    radial-gradient(
      120% 140% at 50% -28%,
      color-mix(in srgb, #f9fffe 88%, var(--color-teal-100) 12%) 0%,
      transparent 54%
    ),
    radial-gradient(
      120% 90% at 15% 32%,
      color-mix(in srgb, var(--color-teal-300) 22%, transparent) 0%,
      transparent 64%
    ),
    radial-gradient(
      120% 90% at 85% 28%,
      color-mix(in srgb, var(--color-crimson-300) 14%, transparent) 0%,
      transparent 66%
    ),
    linear-gradient(
      180deg,
      color-mix(in srgb, #f6fcff 70%, var(--color-teal-200) 30%) 0%,
      color-mix(in srgb, #fbfffe 92%, var(--color-teal-100) 8%) 42%,
      #ffffff 78%
    ),
    #ffffff;
  background-repeat: no-repeat;
}

:global(body.dark) .page {
  background:
    radial-gradient(
      120% 140% at 52% -32%,
      color-mix(in srgb, #122a3e 62%, var(--color-teal-200) 38%) 0%,
      transparent 64%
    ),
    radial-gradient(
      120% 90% at 18% 34%,
      color-mix(in srgb, var(--color-teal-400) 32%, transparent) 0%,
      transparent 74%
    ),
    radial-gradient(
      120% 90% at 82% 30%,
      color-mix(in srgb, var(--color-crimson-300) 24%, transparent) 0%,
      transparent 76%
    ),
    linear-gradient(
      180deg,
      color-mix(in srgb, #02101d 70%, var(--color-graphite-900) 30%) 0%,
      color-mix(in srgb, #031422 52%, var(--color-graphite-900) 48%) 42%,
      color-mix(in srgb, #01070f 85%, var(--color-graphite-900) 15%) 100%
    );
}

.page::after {
  content: "";
  position: absolute;
  inset: auto 0 0 0;
  height: clamp(9rem, 16vw, 14rem);
  background: linear-gradient(180deg, rgba(255, 255, 255, 0) 0%, #ffffff 62%);
  pointer-events: none;
  z-index: 0;
}

.hero {
  position: absolute;
  inset: 0;
  pointer-events: none;
  overflow: hidden;
  z-index: -1;
}

.heroVeil {
  position: absolute;
  inset: -28% -35% 10% -35%;
  background: radial-gradient(
    circle at 48% 16%,
    color-mix(in srgb, var(--color-teal-200) 60%, transparent) 0%,
    color-mix(in srgb, var(--color-teal-600) 20%, transparent) 45%,
    transparent 70%
  );
  filter: blur(140px);
  opacity: 0.66;
  animation: hero-pulse 18s ease-in-out infinite;
}

:global(body.dark) .heroVeil {
  background: radial-gradient(
    circle at 50% 16%,
    color-mix(in srgb, var(--color-teal-200) 68%, transparent) 0%,
    color-mix(in srgb, var(--color-teal-900) 30%, transparent) 50%,
    transparent 75%
  );
  opacity: 0.78;
}

.heroOrb {
  position: absolute;
  width: clamp(12rem, 26vw, 18rem);
  aspect-ratio: 1;
  border-radius: 50%;
  filter: blur(18px);
  opacity: 0.55;
  mix-blend-mode: screen;
  animation: hero-drift 22s linear infinite;
}

.heroOrbLeft {
  top: 24%;
  left: 10%;
  background: radial-gradient(circle, color-mix(in srgb, var(--color-teal-200) 68%, transparent) 0%, transparent 60%);
  animation-delay: -6s;
}

.heroOrbRight {
  top: 32%;
  right: 12%;
  background: radial-gradient(circle, color-mix(in srgb, var(--color-amber-200) 58%, transparent) 0%, transparent 60%);
  animation-delay: -12s;
}

:global(body.dark) .heroOrbLeft {
  background: radial-gradient(circle, color-mix(in srgb, var(--color-teal-200) 78%, transparent) 0%, transparent 74%);
}

:global(body.dark) .heroOrbRight {
  background: radial-gradient(circle, color-mix(in srgb, var(--color-amber-200) 72%, transparent) 0%, transparent 74%);
}

.inner {
  position: relative;
  z-index: 1;
  width: 100%;
  padding-inline: clamp(1.5rem, 5vw, 3.25rem);
  box-sizing: border-box;
}

.section {
  @include utils.section-shell($padding-block: 0);
  display: grid;
  gap: clamp(2rem, 5vw, 3.5rem);
}

.header {
  max-width: min(48rem, 100%);
  margin-inline: auto;
  text-align: center;
  display: grid;
  gap: clamp(0.85rem, 2vw, 1.4rem);
  padding: clamp(2.25rem, 4vw, 3rem);
  border-radius: clamp(1.6rem, 3vw, 2.4rem);
  background: rgba(255, 255, 255, 0.82);
  border: 1px solid rgba(94, 234, 212, 0.25);
  box-shadow:
    0 36px 120px rgba(2, 8, 18, 0.42),
    inset 0 0 0 1px rgba(255, 255, 255, 0.04);
  backdrop-filter: blur(18px);
}

:global(body.dark) .header {
  background: rgba(2, 12, 20, 0.78);
  border-color: rgba(94, 234, 212, 0.22);
}

.headerEyebrow {
  font-size: var(--font-size-sm);
  letter-spacing: 0.32em;
  text-transform: uppercase;
  color: rgba(187, 247, 208, 0.8);
  font-weight: 600;
}

.headerTitle {
  margin: 0;
  font-size: clamp(2.5rem, 5vw, 3.6rem);
  line-height: 1.05;
  font-weight: 700;
  color: rgba(240, 253, 250, 0.96);
}

.headerSummary {
  margin: 0;
  font-size: clamp(1.05rem, 2.4vw, 1.3rem);
  line-height: 1.7;
  color: rgba(209, 250, 229, 0.82);
}

.headerDivider {
  width: min(12rem, 70%);
  height: 1px;
  margin: 0 auto;
  background: linear-gradient(90deg, rgba(94, 234, 212, 0), rgba(94, 234, 212, 0.85), rgba(94, 234, 212, 0));
}

.grid {
  position: relative;
  display: grid;
  gap: clamp(1.75rem, 4vw, 2.5rem);
}

.grid :global(.elevatedSurfaceInteractive) {
  position: relative;
  overflow: hidden;
}

.grid :global(.elevatedSurfaceInteractive::after) {
  content: "";
  position: absolute;
  inset: -40% -20% 55% -20%;
  background: radial-gradient(circle, rgba(94, 234, 212, 0.28), rgba(94, 234, 212, 0));
  opacity: 0.65;
  mix-blend-mode: screen;
  pointer-events: none;
}

.grid :global(.elevatedSurfaceInteractive:hover::after),
.grid :global(.elevatedSurfaceInteractive:focus-within::after) {
  opacity: 0.78;
}

.empty {
  margin: 0;
  text-align: center;
  font-size: var(--font-size-lg);
  color: rgba(165, 243, 252, 0.72);
}

.pagination {
  margin-inline: auto;
  margin-top: clamp(1rem, 3vw, 1.5rem);
}

@keyframes hero-pulse {
  0%, 100% {
    opacity: 0.62;
    transform: scale(1);
  }
  50% {
    opacity: 0.92;
    transform: scale(1.12);
  }
}

@keyframes hero-drift {
  0% {
    transform: translate3d(-6%, 0, 0) scale(1);
  }
  50% {
    transform: translate3d(8%, -10%, 0) scale(1.08);
  }
  100% {
    transform: translate3d(-10%, 6%, 0) scale(1);
  }
}

@media (min-width: 50rem) {
  .grid {
    grid-template-columns: repeat(auto-fit, minmax(min(20rem, 100%), 1fr));
  }
}
